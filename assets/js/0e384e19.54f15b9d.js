"use strict";(self.webpackChunkrl_notes=self.webpackChunkrl_notes||[]).push([[671],{9881:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return m},default:function(){return p}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),l=["components"],o={title:"Reinforcement Learning",sidebar_position:1,slug:"/"},s="Reinforcement Learning",u={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Reinforcement Learning",description:"This is a personal notes site, built with Docusaurus 2.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/",permalink:"/rl-notes/",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Reinforcement Learning",sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar",next:{title:"Multi-Armed Bandits",permalink:"/rl-notes/tabular-methods/multi-armed-bandits"}},m=[{value:"Introduction",id:"introduction",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Comparison",id:"comparison",children:[]},{value:"Basic Elements",id:"basic-elements",children:[{value:"Policy",id:"policy",children:[]},{value:"Reward Signal",id:"reward-signal",children:[]},{value:"Value Function",id:"value-function",children:[]},{value:"Model of the Environment",id:"model-of-the-environment",children:[]}]}],d={toc:m};function p(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"reinforcement-learning"},"Reinforcement Learning"),(0,r.kt)("p",null,"This is a personal notes site, built with ",(0,r.kt)("a",{parentName:"p",href:"https://docusaurus.io/"},"Docusaurus 2"),"."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Reinforcement Learning is"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a paradigm of machine learning"),(0,r.kt)("li",{parentName:"ul"},"about maximizing a goal (reward) by finding what actions to take in an environment at different states")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Learning to play a game, like Chess, Go, arcade games"),(0,r.kt)("li",{parentName:"ul"},"A human learning to walk"),(0,r.kt)("li",{parentName:"ul"},"An aircraft autopilot system learning to handle a plane"),(0,r.kt)("li",{parentName:"ul"},"Personalization systems in online services")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"comparison"},"Comparison"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Supervised Learning")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Unsupervised Learning")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Reinforcement Learning")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Learning to approximate answers in new situations using reference answers"),(0,r.kt)("td",{parentName:"tr",align:null},"Learning to find underlying structure in the given data"),(0,r.kt)("td",{parentName:"tr",align:null},"Learning optimal strategy by trial and error")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Needs reference data and correct answers"),(0,r.kt)("td",{parentName:"tr",align:null},"No prior data/feedback required"),(0,r.kt)("td",{parentName:"tr",align:null},"Needs feedback/reward on attempted actions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Model does not affect input data"),(0,r.kt)("td",{parentName:"tr",align:null},"Model does not affect input data"),(0,r.kt)("td",{parentName:"tr",align:null},"Agent can affect the environment, its possible future states and actions")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"basic-elements"},"Basic Elements"),(0,r.kt)("p",null,"There is an ",(0,r.kt)("strong",{parentName:"p"},"agent")," and an ",(0,r.kt)("strong",{parentName:"p"},"environment"),". The agent can be any entity that has the ability to take some ",(0,r.kt)("em",{parentName:"p"},"action")," at any given ",(0,r.kt)("em",{parentName:"p"},"state"),"."),(0,r.kt)("h3",{id:"policy"},"Policy"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The strategy that the agent follows in a given state of the environment"),(0,r.kt)("li",{parentName:"ul"},"Similar to ",(0,r.kt)("em",{parentName:"li"},"stimulus-response")," rules or associations")),(0,r.kt)("h3",{id:"reward-signal"},"Reward Signal"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Defines the goal"),(0,r.kt)("li",{parentName:"ul"},"At each state/step, the environment gives a certain reward to the signal"),(0,r.kt)("li",{parentName:"ul"},"Agent's objective is to maximize the total reward")),(0,r.kt)("h3",{id:"value-function"},"Value Function"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("em",{parentName:"li"},"value of a state")," is the total amount of reward an agent can expect to receive, starting from that ",(0,r.kt)("em",{parentName:"li"},"state"),". "),(0,r.kt)("li",{parentName:"ul"},"Value function is simply a map from states to their given state values")),(0,r.kt)("p",null,"An action may have low rewards but lead to a state with high value, indicating that a lower immediate reward will be more than compensated with an overall higher reward."),(0,r.kt)("h3",{id:"model-of-the-environment"},"Model of the Environment"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A reference which can mimic the actual environment, and can show how the environment will behave given a particular state and action",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Can be used for planning and finding optimal policy"))),(0,r.kt)("li",{parentName:"ul"},"A model may not always be available, when the environment is unpredictable")))}p.isMDXComponent=!0}}]);